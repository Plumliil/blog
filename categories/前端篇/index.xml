<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>前端篇 - Category - Plumliil Blogs</title><link>https://plumliil.cn/categories/%E5%89%8D%E7%AB%AF%E7%AF%87/</link><description>前端篇 - Category - Plumliil Blogs</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>plumliil@outlook.com (Plumliil)</managingEditor><webMaster>plumliil@outlook.com (Plumliil)</webMaster><lastBuildDate>Fri, 05 Apr 2024 15:18:21 +0800</lastBuildDate><atom:link href="https://plumliil.cn/categories/%E5%89%8D%E7%AB%AF%E7%AF%87/" rel="self" type="application/rss+xml"/><item><title>Iframe跨域通信</title><link>https://plumliil.cn/posts/20240405-iframe%E8%B7%A8%E5%9F%9F%E9%80%9A%E4%BF%A1/</link><pubDate>Fri, 05 Apr 2024 15:18:21 +0800</pubDate><author>Plumliil</author><guid>https://plumliil.cn/posts/20240405-iframe%E8%B7%A8%E5%9F%9F%E9%80%9A%E4%BF%A1/</guid><description>iframe间跨域通信 在 web 开发中，使用 iframe 进行通信是一种常见的技术，特别是在需要在页面中嵌入另一个页面或者来自不同域的内容时。通过 iframe 通信，父页</description></item><item><title>videojs播放流媒体视频</title><link>https://plumliil.cn/posts/20240207-videojs%E6%92%AD%E6%94%BE%E6%B5%81%E5%AA%92%E4%BD%93%E8%A7%86%E9%A2%91/</link><pubDate>Wed, 07 Feb 2024 20:01:23 +0800</pubDate><author>Plumliil</author><guid>https://plumliil.cn/posts/20240207-videojs%E6%92%AD%E6%94%BE%E6%B5%81%E5%AA%92%E4%BD%93%E8%A7%86%E9%A2%91/</guid><description><![CDATA[下载相关npm包 { &#34;dependencies&#34;: { &#34;@videojs-player/vue&#34;: &#34;^1.0.0&#34;, &#34;video.js&#34;: &#34;^7.21.5&#34;, &#34;videojs-contrib-hls&#34;: &#34;^5.15.0&#34;, &#34;vue-video-player&#34;: &#34;^6.0.0&#34; }, &#34;devDependencies&#34;: { &#34;@types/video.js&#34;: &#34;^7.3.56&#34;, }, } 前端相关vue3代码 &lt;script setup lang=&#34;ts&#34;&gt; import videojs from &#39;video.js&#39; import type { VideoJsPlayerOptions } from &#39;video.js&#39; import &#39;video.js/dist/video-js.min.css&#39; interface MyVideoProps { /** 视频地址 */ src: string } const props = withDefaults(defineProps&lt;MyVideoProps&gt;(), {}) //]]></description></item><item><title>简单理解微前端</title><link>https://plumliil.cn/posts/20231109-%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E5%BE%AE%E5%89%8D%E7%AB%AF/</link><pubDate>Thu, 09 Nov 2023 22:01:46 +0800</pubDate><author>Plumliil</author><guid>https://plumliil.cn/posts/20231109-%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E5%BE%AE%E5%89%8D%E7%AB%AF/</guid><description>参考文章 手把手教你写一个简易的微前端框架-谭光志 参考仓库 mini-single-spa 本篇文章为学习微前端有感,只为记录微前端简短理解只实现了v1&amp;amp;v2版本,深</description></item><item><title>前端实现PDF预览下载打印</title><link>https://plumliil.cn/posts/20231029-%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0pdf%E9%A2%84%E8%A7%88%E4%B8%8B%E8%BD%BD%E6%89%93%E5%8D%B0/</link><pubDate>Sun, 29 Oct 2023 13:37:04 +0800</pubDate><author>Plumliil</author><guid>https://plumliil.cn/posts/20231029-%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0pdf%E9%A2%84%E8%A7%88%E4%B8%8B%E8%BD%BD%E6%89%93%E5%8D%B0/</guid><description>为了实现前端预览pdf文件,在vue3和react中都进行了尝试 React react-pdf 在react中用到的组件是react-pdf,我们可以对组件进行二次封装</description></item><item><title>TypeScript中关键字介绍</title><link>https://plumliil.cn/posts/20231017-typescript%E4%B8%AD%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%8B%E7%BB%8D/</link><pubDate>Tue, 17 Oct 2023 20:31:11 +0800</pubDate><author>Plumliil</author><guid>https://plumliil.cn/posts/20231017-typescript%E4%B8%AD%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%8B%E7%BB%8D/</guid><description><![CDATA[最近学习TS类型体操,其中用到了例如 keyof infer等的关键字,但在日常项目中又不太常用,故有此记录,方便查阅 extends 用于类型的继承 interface Animal { name:string color:string gender:&#39;male&#39; | &#39;female&#39; }]]></description></item><item><title>React中useContext,useReducer简单实现全局状态管理</title><link>https://plumliil.cn/posts/20230907-react%E4%B8%ADusecontextusereducer%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</link><pubDate>Thu, 07 Sep 2023 22:50:20 +0800</pubDate><author>Plumliil</author><guid>https://plumliil.cn/posts/20230907-react%E4%B8%ADusecontextusereducer%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</guid><description>useContext Context Hook 是可以让子组件给后代组件共享数据 接受一个上下文对象(从&amp;rsquo; React.createContext &amp;lsquo;返回的值)并返回当前 context 值，该值由最近的给定上下文提</description></item><item><title>Antd及AntdPro组件使用积累</title><link>https://plumliil.cn/posts/20230806-antd%E5%8F%8Aandpro%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8%E7%A7%AF%E7%B4%AF/</link><pubDate>Sun, 06 Aug 2023 14:24:44 +0800</pubDate><author>Plumliil</author><guid>https://plumliil.cn/posts/20230806-antd%E5%8F%8Aandpro%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8%E7%A7%AF%E7%B4%AF/</guid><description>Ant Design 和 Ant Design Pro 可能是 React 选手在日常工作中接触最多的库了. 接下来就说说在工作用可能会用到但是不经常用,但用的时候会忘的一些属性或方法的使用 Modal 自定义</description></item><item><title>React中编写操作树形数据的自定义Hook</title><link>https://plumliil.cn/posts/20230702-react%E4%B8%AD%E7%BC%96%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89hook/</link><pubDate>Sun, 02 Jul 2023 20:10:04 +0800</pubDate><author>Plumliil</author><guid>https://plumliil.cn/posts/20230702-react%E4%B8%AD%E7%BC%96%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89hook/</guid><description>什么是 Hook hook 即为钩子,是一种特殊的函数,它可以让你在函数式组件中使用一些 react 特性,目前在 react 中常用的 hook 有以下几类 useState: 用于在函数组件中定义和使用状态(</description></item><item><title>百度Amis+React实践</title><link>https://plumliil.cn/posts/20230624-%E7%99%BE%E5%BA%A6amis+react%E5%AE%9E%E8%B7%B5/</link><pubDate>Sat, 24 Jun 2023 17:09:03 +0800</pubDate><author>Plumliil</author><guid>https://plumliil.cn/posts/20230624-%E7%99%BE%E5%BA%A6amis+react%E5%AE%9E%E8%B7%B5/</guid><description>背景 在项目中有集成低代码平台的想法,经过多方对比最后选择了 amis,主要是需要通过 amis 进行页面配置,导出 json 供移动端和 PC 端进行渲染,所以接下来讲</description></item><item><title>React使用中常犯的错误</title><link>https://plumliil.cn/posts/20230507-react%E4%BD%BF%E7%94%A8%E4%B8%AD%E5%B8%B8%E7%8A%AF%E7%9A%84%E9%94%99%E8%AF%AF/</link><pubDate>Sun, 07 May 2023 09:15:54 +0800</pubDate><author>Plumliil</author><guid>https://plumliil.cn/posts/20230507-react%E4%BD%BF%E7%94%A8%E4%B8%AD%E5%B8%B8%E7%8A%AF%E7%9A%84%E9%94%99%E8%AF%AF/</guid><description><![CDATA[一:函数 在 React 中我们通常使用 tsx 来编写代码,在编码时我经常会遇到一个,选择用什么方式来调用我们的函数如: const clickMe=()=&gt;{ console.log(&#39;button&#39;) } &lt;button onClick={clickMe}&gt;clickMe&lt;/button&gt; // 1 &lt;button onClick={clickMe()}&gt;clickMe&lt;/button&gt; // 2 &lt;button onClick={()=&gt;clickMe()}&gt;clickMe&lt;/button&gt; // 3 当我们使]]></description></item></channel></rss>