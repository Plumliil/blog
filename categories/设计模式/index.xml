<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>设计模式 - Category - Plumliil Blogs</title><link>https://plumliil.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><description>设计模式 - Category - Plumliil Blogs</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>plumliil@outlook.com (Plumliil)</managingEditor><webMaster>plumliil@outlook.com (Plumliil)</webMaster><lastBuildDate>Mon, 22 Jan 2024 20:01:23 +0800</lastBuildDate><atom:link href="https://plumliil.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" rel="self" type="application/rss+xml"/><item><title>代理模式</title><link>https://plumliil.cn/posts/20240112-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</link><pubDate>Mon, 22 Jan 2024 20:01:23 +0800</pubDate><author>Plumliil</author><guid>https://plumliil.cn/posts/20240112-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</guid><description>https://www.patterns.dev/vanilla/proxy-pattern 代理模式 通过代理对象，我们可以更好地控制与某些对象的交互.例如当我们获取或者设置值时,每当我们与对象交互代理对象就可以确定该对象地行为. 一</description></item><item><title>单例模式</title><link>https://plumliil.cn/posts/20240103-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link><pubDate>Wed, 03 Jan 2024 22:24:39 +0800</pubDate><author>Plumliil</author><guid>https://plumliil.cn/posts/20240103-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid><description>https://www.patterns.dev/vanilla/singleton-pattern 单例模式 单例是可以实例化一次就可以全局访问的类,这个创建出来的单例可以在整个应用中进行共享,这使得单例可以帮助应用管理全局状态 首先让我们看</description></item></channel></rss>